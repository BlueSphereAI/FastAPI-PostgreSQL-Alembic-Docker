---
description: This file defines rules for maintaining project consistency, including structured note-taking in cursorDev/notes.md, task management in cursorDev/scratchpad.md, and enforcing best practices for module installation, imports, type annotations, and database management.
globs: 
---
# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `cursorDev/notes.md` file so you will not make the same mistake again. 

You should also use the `cursorDev/scratchpad.md` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step

#Important
Always check the scratchpad and implement tasks that are not yet completed. Implement tasks one by one. If you believe a task is done, update the scratchpad and verify if any tasks are still pending. Ensure that all tasks have been implementedâ€”do not miss a single task. This should always be followed in the workflow.



# Rules
Apply the following rules to the codebase

## Module installation rules
- Insall necessary python modules for generated code on your own using poetry instead of pip.
- Especially for EmailStr, install pydantic[email].

## Type expression rules
- Do not use call expressions like constr() for type annotations. Instead, use the type annotation directly.

## Import rules
- Do not use relative imports. Instead, use absolute imports.
- Import necessary python modules for generated code.
- Import db dependencies from app.dependencies.database instead of app.dependencies.db.

## Database rules
- Create a new directory for each database model in app/database directory with __init__.py, model.py and service.py.
- New model should be derived from BaseModel and new service should be derived from BaseService. Never miss table=True at the model class definition.
- After every change in database, update __init__.py file in app/database directory to include all the models except for the base model. Then, execute "make initialMigration" to create the initial migration. After that, execute "make applyMigration" to apply the migration on your own. Before executing these commands, make sure to be in the backend directory.
.